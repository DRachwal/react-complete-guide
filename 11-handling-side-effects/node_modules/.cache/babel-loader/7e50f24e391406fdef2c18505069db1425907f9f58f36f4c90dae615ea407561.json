{"ast":null,"code":"import { useState, useEffect, createContext } from 'react';\nconst AuthContext = /*#__PURE__*/createContext({\n  isLoggedIn: false,\n  onLogout: () => {},\n  onLogin: (email, password) => {}\n});\nconsole.log('AuthContext', AuthContext);\n\n// export const AuthContextProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   useEffect(() => {\n//     const isLoggedInStorage = localStorage.getItem('isLoggedIn');\n//     if (isLoggedInStorage) setIsLoggedIn(true);\n//   }, [])\n\n//   const loginHandler = (email, password) => {\n//     // We should of course check email and password\n//     // But it's just a dummy/ demo anyways\n//     localStorage.setItem('isLoggedIn', 1);\n//     setIsLoggedIn(true);\n//   };\n\n//   const logoutHandler = () => {\n//     localStorage.removeItem('isLoggedIn');\n//     setIsLoggedIn(false);\n//   };\n\n//   return <AuthContext.Provider value={{\n//     isLoggedIn,\n//     onLogout: logoutHandler,\n//     onLogin: loginHandler\n//   }}>\n//     {children}\n//   </AuthContext.Provider>\n// }\n\nexport default AuthContext;","map":{"version":3,"names":["useState","useEffect","createContext","AuthContext","isLoggedIn","onLogout","onLogin","email","password","console","log"],"sources":["/Users/damian.rachwal/Documents/code/react-complete-guide/11-handling-side-effects/src/store/authContext.js"],"sourcesContent":["import { useState, useEffect, createContext } from 'react';\n\nconst AuthContext = createContext({\n  isLoggedIn: false,\n  onLogout: () => { },\n  onLogin: (email, password) => { }\n});\n\nconsole.log('AuthContext', AuthContext)\n\n// export const AuthContextProvider = ({ children }) => {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n//   useEffect(() => {\n//     const isLoggedInStorage = localStorage.getItem('isLoggedIn');\n//     if (isLoggedInStorage) setIsLoggedIn(true);\n//   }, [])\n\n//   const loginHandler = (email, password) => {\n//     // We should of course check email and password\n//     // But it's just a dummy/ demo anyways\n//     localStorage.setItem('isLoggedIn', 1);\n//     setIsLoggedIn(true);\n//   };\n\n//   const logoutHandler = () => {\n//     localStorage.removeItem('isLoggedIn');\n//     setIsLoggedIn(false);\n//   };\n\n\n//   return <AuthContext.Provider value={{\n//     isLoggedIn,\n//     onLogout: logoutHandler,\n//     onLogin: loginHandler\n//   }}>\n//     {children}\n//   </AuthContext.Provider>\n// }\n\nexport default AuthContext;"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,aAAa,QAAQ,OAAO;AAE1D,MAAMC,WAAW,gBAAGD,aAAa,CAAC;EAChCE,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAEA,CAAA,KAAM,CAAE,CAAC;EACnBC,OAAO,EAAEA,CAACC,KAAK,EAAEC,QAAQ,KAAK,CAAE;AAClC,CAAC,CAAC;AAEFC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEP,WAAW,CAAC;;AAEvC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}