{"ast":null,"code":"// import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst initialAuthState = {\n  isAuth: true\n};\n\n// const counterReducer = (state = initialState, action) => {\n//   console.log('counterReducer state', state);\n\n//   if (action.type === 'INCREMENT')\n//     return {\n//       ...state,\n//       counter: state.counter + 1\n//     }\n\n//   if (action.type === 'DECREMENT')\n//     return {\n//       ...state,\n//       counter: state.counter - 1\n//     }\n\n//   if (action.type === 'INCREASE')\n//     return {\n//       ...state,\n//       counter: state.counter + action.payload\n//     }\n\n//   if (action.type === 'TOGGLE_COUNTER')\n//     return {\n//       ...state,\n//       showCounter: !state.showCounter\n//     }\n\n//   return state;\n// };\n\n// const store = createStore(counterReducer);\n\n// export default store;\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      console.log('increase');\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      console.log('toggleCounter state', state.showCounter);\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuth = true;\n    },\n    logout(state) {\n      state.isAuth = false;\n    }\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialCounterState","counter","showCounter","initialAuthState","isAuth","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","console","log","payload","toggleCounter","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"sources":["/Users/damian.rachwal/Documents/code/react-complete-guide/19-redux/src/store/index.js"],"sourcesContent":["// import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\n\nconst initialAuthState = {\n  isAuth: true\n};\n\n// const counterReducer = (state = initialState, action) => {\n//   console.log('counterReducer state', state);\n\n//   if (action.type === 'INCREMENT')\n//     return {\n//       ...state,\n//       counter: state.counter + 1\n//     }\n\n//   if (action.type === 'DECREMENT')\n//     return {\n//       ...state,\n//       counter: state.counter - 1\n//     }\n\n//   if (action.type === 'INCREASE')\n//     return {\n//       ...state,\n//       counter: state.counter + action.payload\n//     }\n\n//   if (action.type === 'TOGGLE_COUNTER')\n//     return {\n//       ...state,\n//       showCounter: !state.showCounter\n//     }\n\n//   return state;\n// };\n\n// const store = createStore(counterReducer);\n\n// export default store;\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      console.log('increase')\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      console.log('toggleCounter state', state.showCounter)\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuth = true;\n    },\n    logout(state) {\n      state.isAuth = false;\n    }\n  }\n});\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store;"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,mBAAmB,GAAG;EAC1BC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,gBAAgB,GAAG;EACvBC,MAAM,EAAE;AACV,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,MAAMC,YAAY,GAAGP,WAAW,CAAC;EAC/BQ,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEP,mBAAmB;EACjCQ,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACfA,KAAK,CAACT,OAAO,EAAE;IACjB,CAAC;IACDU,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACT,OAAO,EAAE;IACjB,CAAC;IACDW,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;MACvBL,KAAK,CAACT,OAAO,GAAGS,KAAK,CAACT,OAAO,GAAGY,MAAM,CAACG,OAAO;IAChD,CAAC;IACDC,aAAaA,CAACP,KAAK,EAAE;MACnBI,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEL,KAAK,CAACR,WAAW,CAAC;MACrDQ,KAAK,CAACR,WAAW,GAAG,CAACQ,KAAK,CAACR,WAAW;IACxC;EACF;AACF,CAAC,CAAC;AAEF,MAAMgB,SAAS,GAAGpB,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEJ,gBAAgB;EAC9BK,QAAQ,EAAE;IACRW,KAAKA,CAACT,KAAK,EAAE;MACXA,KAAK,CAACN,MAAM,GAAG,IAAI;IACrB,CAAC;IACDgB,MAAMA,CAACV,KAAK,EAAE;MACZA,KAAK,CAACN,MAAM,GAAG,KAAK;IACtB;EACF;AACF,CAAC,CAAC;AAEF,MAAMiB,KAAK,GAAGtB,cAAc,CAAC;EAC3BuB,OAAO,EAAE;IACPrB,OAAO,EAAEI,YAAY,CAACiB,OAAO;IAC7BC,IAAI,EAAEL,SAAS,CAACI;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAAO;AAE5C,eAAeJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}